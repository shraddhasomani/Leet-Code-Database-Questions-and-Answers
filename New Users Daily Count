Write an SQL query that reports for every date within at most 90 days from today, the number of users that logged in for the first time on that date. 
Assume today is 2019-06-30.
The query result format is in the following example:

Traffic table:
+---------+----------+---------------+
| user_id | activity | activity_date |
+---------+----------+---------------+
| 1       | login    | 2019-05-01    |
| 1       | homepage | 2019-05-01    |
| 1       | logout   | 2019-05-01    |
| 2       | login    | 2019-06-21    |
| 2       | logout   | 2019-06-21    |
| 3       | login    | 2019-01-01    |
| 3       | jobs     | 2019-01-01    |
| 3       | logout   | 2019-01-01    |
| 4       | login    | 2019-06-21    |
| 4       | groups   | 2019-06-21    |
| 4       | logout   | 2019-06-21    |
| 5       | login    | 2019-03-01    |
| 5       | logout   | 2019-03-01    |
| 5       | login    | 2019-06-21    |
| 5       | logout   | 2019-06-21    |
+---------+----------+---------------+

Result table:
+------------+-------------+
| login_date | user_count  |
+------------+-------------+
| 2019-05-01 | 1           |
| 2019-06-21 | 2           |
+------------+-------------+

Note that we only care about dates with non zero user count.
The user with id 5 first logged in on 2019-03-01 so he's not counted on 2019-06-21.



Answer:

SELECT T.ACTIVITY_DATE AS LOGIN_DATE,
       COUNT(T.USER_ID) AS USER_COUNT
FROM (
    SELECT USER_ID,
           ACTIVITY_DATE,
           ROW_NUMBER() OVER(PARTITION BY USER_ID ORDER BY ACTIVITY_DATE) AS RNUM
    FROM TRAFFIC
    WHERE ACTIVITY = 'login'
) T
WHERE T.RNUM = 1
AND T.ACTIVITY_DATE BETWEEN DATE_ADD('2019-06-30', INTERVAL -90 DAY) AND '2019-06-30'
GROUP BY T.ACTIVITY_DATE
;
