Write an SQL query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. 
In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.
The query result format is in the following example.

Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+

Result table: 
+-----------+
| fraction  |
+-----------+
| 0.33      |
+-----------+

Only the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33



Answer:

-- #1
WITH FIRST_LOGIN AS (
    SELECT PLAYER_ID,
           MIN(EVENT_DATE) AS FIRST_LOGIN_DATE
    FROM ACTIVITY
    GROUP BY PLAYER_ID
)

SELECT ROUND(COUNT(A.PLAYER_ID) / COUNT(F.PLAYER_ID),2) AS FRACTION
FROM FIRST_LOGIN F
LEFT JOIN ACTIVITY A ON F.PLAYER_ID = A.PLAYER_ID AND A.EVENT_DATE = F.FIRST_LOGIN_DATE + 1
;

-- #2
SELECT ROUND(COUNT(DISTINCT CASE WHEN DATEDIFF(T.NEXT_LOGIN, T.EVENT_DATE) = 1 THEN T.PLAYER_ID END) / COUNT(DISTINCT T.PLAYER_ID), 2) AS FRACTION
FROM (
SELECT PLAYER_ID,
       EVENT_DATE,
       LEAD(EVENT_DATE) OVER(PARTITION BY PLAYER_ID ORDER BY EVENT_DATE) AS NEXT_LOGIN,
       ROW_NUMBER() OVER(PARTITION BY PLAYER_ID ORDER BY EVENT_DATE) AS RNUM
FROM ACTIVITY
) T
WHERE T.RNUM = 1
;
