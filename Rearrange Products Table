Write an SQL query to rearrange the Products table so that each row has (product_id, store, price). 
If a product is not available in a store, do not include a row with that product_id and store combination in the result table.
Return the result table in any order.
The query result format is in the following example:

Products table:
+------------+--------+--------+--------+
| product_id | store1 | store2 | store3 |
+------------+--------+--------+--------+
| 0          | 95     | 100    | 105    |
| 1          | 70     | null   | 80     |
+------------+--------+--------+--------+

Result table:
+------------+--------+-------+
| product_id | store  | price |
+------------+--------+-------+
| 0          | store1 | 95    |
| 0          | store2 | 100   |
| 0          | store3 | 105   |
| 1          | store1 | 70    |
| 1          | store3 | 80    |
+------------+--------+-------+

Product 0 is available in all three stores with prices 95, 100, and 105 respectively.
Product 1 is available in store1 with price 70 and store3 with price 80. The product is not available in store2.



Answer:

SELECT PRODUCT_ID,
       'store1' AS STORE,
       STORE1 AS PRICE
FROM PRODUCTS
WHERE STORE1 IS NOT NULL

UNION ALL

SELECT PRODUCT_ID,
       'store2' AS STORE,
       STORE2 AS PRICE
FROM PRODUCTS
WHERE STORE2 IS NOT NULL

UNION ALL

SELECT PRODUCT_ID,
       'store3' AS STORE,
       STORE3 AS PRICE
FROM PRODUCTS
WHERE STORE3 IS NOT NULL

ORDER BY PRODUCT_ID
;
